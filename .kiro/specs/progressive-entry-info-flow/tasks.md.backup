# Progressive Entry Info Flow - Implementation Plan

## Overview

This implementation plan breaks down the Progressive Entry Info Flow feature into manageable phases. Each phase builds upon the previous one, ensuring a solid foundation before adding complexity.

## Implementation Phases

1. **Phase 1: 基础设施层** - Data models, services, and utilities
2. **Phase 2: 渐进式导航和自动保存** - Progressive navigation and auto-save
3. **Phase 3: 准备状态仪表板** - ThailandEntryFlowScreen
4. **Phase 4: 入境包生命周期** - Entry pack lifecycle management
5. **Phase 5: 通知系统** - Notifications and reminders
6. **Phase 6: Immigration Officer View** - Presentation mode
7. **Phase 7: 国际化** - Internationalization
8. **Phase 8: 历史和数据管理** - History, export, and privacy

---

## Phase 1: 基础设施层 - 数据模型、服务、工具类

### 1. 数据模型扩展和类型定义

- [ ] 1.1 扩展 EntryInfo 数据模型
  - 在 `app/models/` 创建或更新 `EntryInfo.js`
  - 添加 `completionMetrics` 字段（缓存每个类别的完成计数）
  - 添加 `status` 字段：`incomplete`, `ready`, `submitted`, `superseded`, `expired`, `archived`
  - 添加 `lastUpdatedAt` 时间戳
  - _需求: 1.4, 2.1-2.6, 4.1-4.6_

- [ ] 1.2 创建 EntryPack 数据模型
  - 创建 `app/models/EntryPack.js`
  - 定义字段：`entryInfoId`, `tdacSubmission`, `documents`, `displayStatus`
  - 实现 `tdacSubmission` 结构：`arrCardNo`, `qrUri`, `pdfPath`, `submittedAt`, `submissionMethod`
  - 添加 `submissionHistory` 数组追踪所有提交尝试
  - _需求: 4.1-4.6, 10.1-10.6, 13.1-13.6_

- [ ] 1.3 创建 EntryPackSnapshot 数据模型
  - 创建 `app/models/EntryPackSnapshot.js`
  - 定义完整快照结构：`snapshotId`, `entryPackId`, `userId`, `destinationId`, `status`, `createdAt`
  - 包含数据副本：`passport`, `personalInfo`, `funds`, `travel`, `tdacSubmission`
  - 添加 `completenessIndicator`, `version`, `metadata`, `photoManifest`
  - 实现不可变性保证（只读访问器）
  - _需求: 11.1-11.7, 12.1-12.7, 15.1-15.7_

- [ ] 1.4 创建 TypeScript 类型定义（如果使用 TS）
  - 创建 `app/types/progressiveEntryFlow.ts` 或在 JS 中使用 JSDoc
  - 定义所有接口：`EntryInfoRecord`, `EntryPack`, `EntryPackSnapshot`, `ValidationStatus`, `ArrivalWindow`
  - 导出类型供其他模块使用
  - _需求: 所有_

### 2. 完成度计算工具

- [ ] 2.1 创建 EntryCompletionCalculator 工具类
  - 创建 `app/utils/EntryCompletionCalculator.js`
  - 实现 `computeCategoryState(fields)` 返回 `complete` | `partial` | `missing`
  - 实现 `calculateCompletionMetrics(entryInfo)` 计算所有类别状态
  - 实现 `getTotalCompletionPercent(metrics)` 计算总完成百分比
  - 缓存计算结果以优化性能
  - _需求: 2.1-2.6, 7.1-7.5_

- [ ] 2.2 定义各类别必填字段元数据
  - 在 `app/config/entryFieldsConfig.js` 定义字段配置
  - Passport 类别：`passportNo`, `fullName`, `nationality`, `dob`, `expiryDate`
  - Personal Info 类别：`occupation`, `provinceCity`, `countryRegion`, `phoneNumber`, `email`, `gender`
  - Funds 类别：至少1个 fund item，每个包含 `type`, `amount`, `currency`
  - Travel 类别：`travelPurpose`, `arrivalDate`, `departureDate`, `flightNumber`, `accommodation`
  - _需求: 2.1-2.6_

### 3. 倒计时和时间窗口计算

- [ ] 3.1 扩展 ArrivalWindowCalculator
  - 更新 `app/utils/thailand/ArrivalWindowCalculator.js`
  - 实现 `getSubmissionWindow(arrivalDate)` 返回窗口状态和消息
  - 支持状态：`no-date`, `pre-window`, `within-window`, `urgent`, `past-deadline`
  - 实现本地化消息生成：中文、英文、西班牙文等
  - 添加实时倒计时更新逻辑（每分钟）
  - _需求: 3.1-3.6_

- [ ] 3.2 创建 CountdownFormatter 工具
  - 创建 `app/utils/CountdownFormatter.js`
  - 实现 `formatTimeRemaining(milliseconds, locale)` 格式化剩余时间
  - 支持多种格式：`X 天 HH:MM`, `HH:MM`, `X 小时 Y 分钟`
  - 根据紧急程度返回颜色提示
  - _需求: 3.1-3.6_

### 4. Entry Pack 服务层

- [ ] 4.1 创建 EntryPackService
  - 创建 `app/services/entryPack/EntryPackService.js`
  - 实现 `createOrUpdatePack(entryInfoId, tdacSubmission)` 创建/更新入境包
  - 实现 `getSummary(destinationId, tripId)` 获取准备状态摘要
  - 实现 `markAsSuperseded(entryPackId)` 标记为已失效
  - 实现 `archive(entryPackId, reason)` 归档入境包
  - 集成 PassportDataService 读取数据
  - _需求: 10.1-10.6, 13.1-13.6, 14.1-14.5_

- [ ] 4.2 实现入境包状态管理
  - 在 EntryPackService 中添加状态转换逻辑
  - 实现状态机：`in_progress` → `submitted` → `superseded` / `completed` / `expired`
  - 添加状态验证和转换规则
  - 记录状态变更历史
  - _需求: 12.1-12.7_

- [ ] 4.3 实现 TDAC 提交元数据持久化
  - 扩展 PassportDataService 或创建专门的存储方法
  - 实现 `saveTDACSubmissionMetadata(userId, metadata)`
  - 实现 `getSubmissionStatus(userId)` 获取提交状态
  - 实现 `getSubmissionHistory(entryPackId)` 获取提交历史
  - 使用 SecureStorageService 存储敏感数据
  - _需求: 10.1-10.6, 19.1-19.5_

### 5. 快照服务

- [ ] 5.1 创建 SnapshotService
  - 创建 `app/services/snapshot/SnapshotService.js`
  - 实现 `createSnapshot(entryPackId, reason)` 创建快照
  - 实现快照创建流程：加载数据 → 复制照片 → 创建不可变记录 → 审计日志
  - 实现 `load(snapshotId)` 加载快照（只读）
  - 实现 `list(userId, filters)` 列出用户快照
  - 实现 `delete(snapshotId)` 删除快照及关联照片
  - _需求: 11.1-11.7, 14.1-14.5, 15.1-15.7_

- [ ] 5.2 实现照片复制和管理
  - 在 SnapshotService 中实现 `copyPhotosToSnapshotStorage(funds, snapshotId)`
  - 使用命名约定：`snapshot_{snapshotId}_{fundItemId}_{timestamp}.jpg`
  - 实现照片清理逻辑（删除快照时）
  - 处理缺失照片的占位符显示
  - _需求: 21.1-21.5, 23.1-23.5_

- [ ] 5.3 实现审计日志系统
  - 创建 `app/services/audit/AuditLogService.js`
  - 实现 `record(eventType, metadata)` 记录审计事件
  - 实现 `getAuditLog(snapshotId)` 获取审计日志
  - 支持事件类型：`created`, `viewed`, `status_changed`, `deleted`, `exported`
  - 确保审计日志不可变
  - _需求: 28.1-28.5_

### 6. 存储配额管理

- [ ] 6.1 创建 StorageQuotaManager
  - 创建 `app/services/storage/StorageQuotaManager.js`
  - 实现 `checkStorageQuota()` 检查存储使用情况
  - 实现 `calculateDirectorySize(path)` 计算目录大小
  - 实现低存储警告逻辑（> 80%）
  - 提供存储使用分解：活动数据 vs 快照数据
  - _需求: 18.1-18.5, 23.1-23.5_

- [ ] 6.2 实现快照保留策略
  - 在 StorageQuotaManager 中实现自动清理逻辑
  - 支持保留期：30天、90天、1年、永久
  - 实现后台作业检查过期快照
  - 用户设置中添加保留策略配置
  - _需求: 18.1-18.5_

---

**Phase 1 完成标准：**
- ✅ 所有数据模型创建并通过验证
- ✅ 核心服务类实现并可单独测试
- ✅ 工具类函数正确计算完成度和倒计时
- ✅ 快照系统可以创建、读取、删除快照
- ✅ 存储配额管理正常工作

**下一阶段：** Phase 2 - 渐进式导航和自动保存

---

_注：完整的任务列表包含 8 个阶段。当前显示 Phase 1。其他阶段将在 Phase 1 完成后添加。_


## Phase 2: 渐进式导航和自动保存

### 7. 自动保存机制

- [ ] 7.1 实现防抖保存工具
  - 创建 `app/utils/DebouncedSave.js`
  - 实现 `debouncedSave(callback, delay=300)` 防抖函数
  - 实现 `flushPendingSave()` 立即执行待保存操作
  - 添加保存状态追踪（pending, saving, saved, error）
  - _需求: 1.2, 4.1-4.5_

- [ ] 7.2 在 ThailandTravelInfoScreen 添加字段级自动保存
  - 更新 `app/screens/thailand/ThailandTravelInfoScreen.js`
  - 为每个输入字段添加 `onBlur` 事件处理
  - 调用 `debouncedSave` 保存单个字段到 PassportDataService
  - 显示保存状态指示器（"保存中...", "已保存", "保存失败"）
  - 添加 "上次编辑: [timestamp]" 显示
  - _需求: 4.1-4.5_

- [ ] 7.3 实现导航前自动保存
  - 在 ThailandTravelInfoScreen 的导航处理函数中添加保存逻辑
  - 在 `handleViewStatus` 中调用 `flushPendingSave()`
  - 在 `componentWillUnmount` 或 `useEffect` cleanup 中保存
  - 处理保存失败情况（显示错误，阻止导航）
  - _需求: 1.2, 4.2_

### 8. 软验证系统

- [ ] 8.1 创建验证工具类
  - 创建 `app/utils/SoftValidation.js`
  - 实现 `validateField(fieldName, value, rules)` 字段验证
  - 实现 `collectWarnings(entryInfo)` 收集所有警告
  - 区分 `error`（格式错误）和 `warning`（缺失字段）
  - 返回验证结果：`{ isValid, warnings: [], errors: [] }`
  - _需求: 5.1-5.5_

- [ ] 8.2 在 ThailandTravelInfoScreen 实现内联验证
  - 为每个字段添加格式验证（email, phone, date等）
  - 在 `onBlur` 时显示内联错误消息（红色文本）
  - 对于空字段显示黄色警告图标（不阻止）
  - 实现验证规则：email 格式、护照号格式、日期有效性
  - _需求: 5.3, 5.4_

- [ ] 8.3 实现非阻塞导航验证
  - 在导航到 ThailandEntryFlowScreen 时执行软验证
  - 收集所有警告但不阻止导航
  - 将警告列表传递给 EntryFlowScreen 显示
  - 移除现有的阻塞验证逻辑
  - _需求: 1.3, 5.1, 5.2_

### 9. 更新继续按钮行为

- [ ] 9.1 替换 "生成入境卡" 按钮为 "查看准备状态"
  - 在 ThailandTravelInfoScreen 中更新按钮文本和行为
  - 按钮始终启用（移除 disabled 状态）
  - 更新按钮点击处理：保存数据 → 导航到 EntryFlowScreen
  - 添加完成度百分比显示在按钮附近（"75% 完成"）
  - _需求: 8.1-8.5_

- [ ] 9.2 实现动态按钮标签
  - 根据完成状态动态更改按钮文本
  - 完成度 < 100%: "查看准备状态"
  - 完成度 = 100%: "提交入境卡"
  - 使用 EntryCompletionCalculator 计算完成度
  - _需求: 8.4_

- [ ] 9.3 添加进度指示器
  - 在按钮下方或附近显示进度条
  - 显示文本："{percent}% 完成" 或 "3/4 部分完成"
  - 使用主题颜色：< 50% 红色，50-99% 黄色，100% 绿色
  - _需求: 8.5_

### 10. 会话状态恢复

- [ ] 10.1 实现会话状态持久化
  - 在 ThailandTravelInfoScreen 保存 UI 状态到 AsyncStorage
  - 保存字段：`expandedSection`, `scrollPosition`, `lastEditedField`
  - 使用键名：`session_state_thailand_{userId}`
  - 在 `componentWillUnmount` 时保存状态
  - _需求: 6.1, 6.4_

- [ ] 10.2 实现会话状态恢复
  - 在 `componentDidMount` 或 `useEffect` 中加载会话状态
  - 恢复上次展开的 CollapsibleSection
  - 滚动到上次编辑位置（如果可能）
  - 高亮上次编辑的字段（短暂动画）
  - _需求: 6.1, 6.3, 6.4_

- [ ] 10.3 在主屏添加 "继续上次填写" 快捷方式
  - 更新 `app/screens/HomeScreen.js`
  - 检测是否有未完成的入境信息（completionPercent < 100%）
  - 显示卡片："继续填写 [目的地] 入境信息 - {percent}% 完成"
  - 点击后导航到 ThailandTravelInfoScreen 并恢复状态
  - _需求: 6.2, 6.3, 6.5_

### 11. 数据加载和初始化

- [ ] 11.1 优化数据加载逻辑
  - 在 ThailandTravelInfoScreen 使用 PassportDataService 加载所有数据
  - 实现并行加载：`Promise.all([passport, personalInfo, travelInfo, funds])`
  - 添加加载状态指示器（骨架屏或 spinner）
  - 处理加载失败情况（显示错误，提供重试）
  - _需求: 1.5, 6.1_

- [ ] 11.2 实现数据预填充
  - 从 PassportDataService 加载现有数据填充表单
  - 如果字段为空，显示占位符提示
  - 保持字段编辑历史（用于撤销功能，可选）
  - _需求: 1.5, 6.1_

### 12. 错误处理和用户反馈

- [ ] 12.1 实现保存错误处理
  - 捕获 PassportDataService 保存错误
  - 显示用户友好的错误消息（Toast 或 Alert）
  - 提供重试选项
  - 记录错误日志用于调试
  - _需求: 4.3_

- [ ] 12.2 实现网络状态检测
  - 添加离线检测（虽然主要是本地存储）
  - 显示离线横幅："离线模式 - 数据仅保存在本地"
  - 在网络恢复时显示通知
  - _需求: 24.1-24.5_

- [ ] 12.3 添加保存状态可视化
  - 在屏幕顶部或底部显示保存状态栏
  - 状态：保存中（spinner）、已保存（✓）、保存失败（❌）
  - 自动隐藏（2秒后）
  - 可点击查看详细信息
  - _需求: 4.5_

---

**Phase 2 完成标准：**
- ✅ 字段编辑后自动保存到 PassportDataService
- ✅ 导航不被验证错误阻塞
- ✅ "查看准备状态" 按钮始终可用
- ✅ 会话状态在应用重启后恢复
- ✅ 主屏显示 "继续上次填写" 快捷方式
- ✅ 用户看到清晰的保存状态反馈

**下一阶段：** Phase 3 - 准备状态仪表板 (ThailandEntryFlowScreen)

---


## Phase 3: 准备状态仪表板 - ThailandEntryFlowScreen

### 13. 创建 ThailandEntryFlowScreen

- [ ] 13.1 创建新的屏幕文件
  - 创建 `app/screens/thailand/ThailandEntryFlowScreen.js`
  - 设置基本 React Native 组件结构
  - 添加导航配置到 `app/navigation/AppNavigator.js`
  - 实现从 ThailandTravelInfoScreen 的导航路由
  - _需求: 7.1, 8.1_

- [ ] 13.2 实现屏幕布局和样式
  - 创建响应式布局：标题、状态卡片、操作按钮区域
  - 使用 ScrollView 支持长内容滚动
  - 应用主题颜色和字体
  - 添加屏幕标题："泰国入境准备状态"
  - _需求: 7.1_

### 14. 完成状态概览卡片

- [ ] 14.1 创建完成度摘要组件
  - 创建 `app/components/CompletionSummaryCard.js`
  - 显示总完成百分比（大字体，居中）
  - 显示完成状态："准备就绪" / "还需完善" / "基本完成"
  - 使用颜色编码：绿色(100%)、黄色(50-99%)、红色(<50%)
  - 添加进度条可视化
  - _需求: 7.2, 7.3_

- [ ] 14.2 实现类别状态列表
  - 创建 `app/components/CategoryStatusList.js`
  - 显示四个类别：护照信息、个人信息、资金证明、旅行信息
  - 每个类别显示：图标、名称、状态（✓完成/⚠️部分/❌缺失）、字段计数
  - 可点击跳转到对应的编辑部分
  - 显示具体缺失字段提示
  - _需求: 7.4, 7.5_

- [ ] 14.3 集成 EntryCompletionCalculator
  - 在 ThailandEntryFlowScreen 中使用 EntryCompletionCalculator
  - 加载用户数据并计算完成度
  - 实时更新状态（当用户从编辑页面返回时）
  - 缓存计算结果以优化性能
  - _需求: 7.2, 7.3_

### 15. 倒计时和提交窗口显示

- [ ] 15.1 创建倒计时组件
  - 创建 `app/components/SubmissionCountdown.js`
  - 显示到达日期和剩余时间
  - 实现实时倒计时更新（每分钟）
  - 根据紧急程度使用不同颜色和样式
  - 处理无到达日期的情况
  - _需求: 3.1-3.6_

- [ ] 15.2 实现提交窗口状态显示
  - 使用 ArrivalWindowCalculator 获取窗口状态
  - 显示状态消息："还有X天可以提交" / "可以提交了" / "紧急：还有X小时"
  - 添加状态图标和颜色编码
  - 显示提交截止时间
  - _需求: 3.1-3.6_

### 16. 动态操作按钮

- [ ] 16.1 实现智能主操作按钮
  - 根据完成状态和提交窗口动态显示按钮
  - 完成度 < 100%: "继续完善信息" → 返回 ThailandTravelInfoScreen
  - 完成度 = 100% + 窗口未开: "等待提交窗口" (disabled)
  - 完成度 = 100% + 窗口开放: "提交泰国入境卡" → TDACSelectionScreen
  - _需求: 8.2, 8.3_

- [ ] 16.2 添加次要操作按钮
  - "编辑信息" 按钮：始终可用，返回编辑页面
  - "预览入境卡" 按钮：完成度 > 80% 时可用
  - "分享给朋友" 按钮：显示二维码或链接（可选）
  - 使用 TouchableOpacity 和适当的样式
  - _需求: 8.4, 8.5_

### 17. 警告和建议显示

- [ ] 17.1 创建警告列表组件
  - 创建 `app/components/WarningsList.js`
  - 显示从 ThailandTravelInfoScreen 传递的验证警告
  - 区分错误（红色，必须修复）和警告（黄色，建议修复）
  - 每个警告可点击跳转到对应字段
  - 显示警告数量徽章
  - _需求: 5.1, 5.2, 7.6_

- [ ] 17.2 实现智能建议系统
  - 分析用户数据并提供个性化建议
  - 建议示例："建议上传银行流水截图" / "确认航班信息准确性"
  - 显示完成度提升提示："完成X可提升至Y%"
  - 添加 "忽略此建议" 功能
  - _需求: 7.6_

### 18. 数据刷新和状态同步

- [ ] 18.1 实现屏幕焦点刷新
  - 使用 `useFocusEffect` 或 `componentDidFocus` 监听屏幕焦点
  - 当从编辑页面返回时重新计算完成度
  - 刷新倒计时和提交窗口状态
  - 显示加载指示器（如果需要）
  - _需求: 7.1, 7.2_

- [ ] 18.2 实现下拉刷新
  - 添加 RefreshControl 到 ScrollView
  - 重新加载用户数据和重新计算状态
  - 显示刷新动画和完成反馈
  - 处理刷新失败情况
  - _需求: 7.1_

### 19. 用户体验优化

- [ ] 19.1 添加加载状态
  - 在数据加载时显示骨架屏或加载指示器
  - 分阶段加载：先显示基本信息，再加载详细状态
  - 处理加载超时情况
  - _需求: 7.1_

- [ ] 19.2 实现状态动画
  - 完成度变化时的进度条动画
  - 状态图标的淡入淡出效果
  - 按钮状态变化的平滑过渡
  - 使用 React Native Animated API
  - _需求: 7.3_

- [ ] 19.3 添加帮助和提示
  - 在关键位置添加信息图标（ⓘ）
  - 点击显示帮助文本或模态框
  - 解释完成度计算逻辑
  - 说明提交窗口规则
  - _需求: 7.6_

### 20. 错误处理和边缘情况

- [ ] 20.1 处理数据加载失败
  - 显示友好的错误消息
  - 提供重试按钮
  - 记录错误日志
  - 提供离线模式提示
  - _需求: 7.1_

- [ ] 20.2 处理无数据情况
  - 检测用户是否有任何入境信息
  - 显示引导消息："开始填写泰国入境信息"
  - 提供 "开始填写" 按钮
  - 显示示例或教程链接
  - _需求: 7.1_

---

**Phase 3 完成标准：**
- ✅ ThailandEntryFlowScreen 正确显示完成状态
- ✅ 倒计时和提交窗口状态准确显示
- ✅ 主操作按钮根据状态智能变化
- ✅ 用户可以查看详细的缺失字段信息
- ✅ 从编辑页面返回时状态正确刷新
- ✅ 所有警告和建议正确显示

**下一阶段：** Phase 4 - 入境包生命周期管理

---


## Phase 4: 入境包生命周期管理

### 21. TDAC 提交后创建入境包

- [ ] 21.1 在 TDACSelectionScreen 集成 EntryPackService
  - 更新 `app/screens/thailand/TDACSelectionScreen.js`
  - 在成功提交后调用 `EntryPackService.createOrUpdatePack()`
  - 传递 TDAC 提交元数据：`arrCardNo`, `qrUri`, `pdfPath`, `submittedAt`, `submissionMethod`
  - 处理创建失败情况（显示错误但不阻止用户）
  - _需求: 10.1-10.6, 13.1-13.6_

- [ ] 21.2 实现提交元数据收集
  - 从 TDAC API 响应中提取所有必要字段
  - 验证元数据完整性（必须有 arrCardNo 和 qrUri）
  - 保存提交时间戳和提交方法（API/WebView/Hybrid）
  - 记录提交历史到 submissionHistory 数组
  - _需求: 10.1-10.6_

- [ ] 21.3 创建入境包快照
  - 在创建入境包后立即调用 `SnapshotService.createSnapshot()`
  - 传递创建原因：`submission`
  - 复制所有资金证明照片到快照存储
  - 显示快照创建进度（可选）
  - _需求: 11.1-11.7, 14.1-14.5_

- [ ] 21.4 更新 EntryInfo 状态
  - 将 EntryInfo 状态从 `ready` 更新为 `submitted`
  - 更新 `lastUpdatedAt` 时间戳
  - 触发状态变更事件（用于通知系统）
  - _需求: 12.1-12.7_

### 22. 入境包详情屏幕 - EntryPackDetailScreen

- [ ] 22.1 创建 EntryPackDetailScreen
  - 创建 `app/screens/thailand/EntryPackDetailScreen.js`
  - 设置基本布局：标题、状态横幅、内容区域、操作按钮
  - 添加导航配置到 AppNavigator
  - 实现从多个入口点的导航（主屏、历史列表、通知）
  - _需求: 13.1-13.6_

- [ ] 22.2 实现入境包状态显示
  - 创建 `app/components/EntryPackStatusBanner.js`
  - 显示状态：已提交、已失效、已过期、已归档
  - 使用颜色编码：绿色（已提交）、灰色（已失效/归档）、红色（已过期）
  - 显示提交日期和到达日期
  - 显示状态图标和描述文本
  - _需求: 13.1, 13.2_

- [ ] 22.3 显示 TDAC 信息卡片
  - 创建 `app/components/TDACInfoCard.js`
  - 显示入境卡号（arrCardNo）大字体居中
  - 显示 QR 码（从 qrUri 加载）
  - 添加 "保存到相册" 按钮
  - 添加 "分享" 按钮（分享 QR 码图片）
  - 显示提交方法和提交时间
  - _需求: 13.3, 13.4_

- [ ] 22.4 实现数据快照查看
  - 显示快照时的所有数据：护照、个人信息、资金证明、旅行信息
  - 使用只读表单或卡片展示
  - 显示资金证明照片（从快照存储加载）
  - 添加 "与当前数据对比" 功能（可选）
  - _需求: 11.1-11.7, 15.1-15.7_

- [ ] 22.5 添加操作按钮
  - "下载 PDF" 按钮：下载入境卡 PDF（如果有）
  - "重新提交" 按钮：标记当前为失效，创建新提交
  - "归档" 按钮：归档入境包
  - "分享给同行者" 按钮：生成分享链接或二维码
  - _需求: 13.5, 13.6, 14.3_

### 23. 入境包列表和历史

- [ ] 23.1 在主屏添加入境包卡片
  - 更新 `app/screens/HomeScreen.js`
  - 检测是否有活跃的入境包（status = submitted）
  - 显示卡片："泰国入境包 - 已提交" + 到达日期倒计时
  - 点击导航到 EntryPackDetailScreen
  - 显示 QR 码缩略图
  - _需求: 13.1, 13.2_

- [ ] 23.2 创建入境包历史列表屏幕
  - 创建 `app/screens/EntryPackHistoryScreen.js`
  - 使用 FlatList 显示所有入境包（按日期倒序）
  - 每个列表项显示：目的地、状态、提交日期、到达日期
  - 支持筛选：活跃、已失效、已归档
  - 支持搜索（按目的地或日期）
  - _需求: 14.1-14.5_

- [ ] 23.3 实现列表项交互
  - 点击列表项导航到 EntryPackDetailScreen
  - 左滑显示快捷操作：归档、删除
  - 长按显示更多选项菜单
  - 显示状态徽章和图标
  - _需求: 14.4, 14.5_

- [ ] 23.4 添加历史入口点
  - 在主屏添加 "入境历史" 按钮或卡片
  - 在设置/个人资料页面添加入口
  - 显示历史记录数量徽章
  - _需求: 14.1_

### 24. 重新提交流程

- [ ] 24.1 实现 "重新提交" 功能
  - 在 EntryPackDetailScreen 添加 "重新提交" 按钮
  - 点击后标记当前入境包为 `superseded`
  - 创建新的快照（原因：`superseded`）
  - 导航回 ThailandTravelInfoScreen 允许编辑
  - _需求: 12.1-12.7, 14.3_

- [ ] 24.2 处理数据变更检测
  - 比较当前数据与快照数据
  - 如果数据有变更，显示变更摘要
  - 询问用户是否要使用新数据重新提交
  - 如果无变更，直接重新提交
  - _需求: 12.3, 12.4_

- [ ] 24.3 实现失效通知
  - 当入境包被标记为失效时，显示通知
  - 通知内容："您的入境包已失效，请重新提交"
  - 提供快捷操作：立即重新提交
  - _需求: 12.5, 12.6_

### 25. 入境包归档和删除

- [ ] 25.1 实现归档功能
  - 在 EntryPackService 中实现 `archive(entryPackId, reason)`
  - 更新状态为 `archived`
  - 记录归档原因和时间
  - 归档的入境包不显示在主屏，但保留在历史中
  - _需求: 14.5_

- [ ] 25.2 实现删除功能
  - 添加 "删除入境包" 选项（需要确认）
  - 删除入境包记录和关联快照
  - 删除快照存储中的照片
  - 显示确认对话框："确定删除？此操作不可撤销"
  - _需求: 14.5, 23.1-23.5_

- [ ] 25.3 实现批量操作
  - 在历史列表添加 "选择模式"
  - 支持批量归档、批量删除
  - 显示选中数量和操作按钮
  - 确认对话框显示影响的入境包数量
  - _需求: 14.5_

### 26. 过期检测和处理

- [ ] 26.1 实现过期检测逻辑
  - 创建 `app/utils/EntryPackExpiryChecker.js`
  - 实现 `checkExpiry(entryPack)` 检查是否过期
  - 规则：到达日期 + 7天后视为过期
  - 返回过期状态和剩余有效时间
  - _需求: 12.7_

- [ ] 26.2 实现后台过期检查
  - 创建后台任务定期检查过期入境包
  - 使用 React Native Background Task 或类似库
  - 每天检查一次，标记过期的入境包
  - 发送过期通知给用户
  - _需求: 12.7, 16.1-16.5_

- [ ] 26.3 显示过期警告
  - 在 EntryPackDetailScreen 显示过期横幅
  - 在主屏卡片显示过期标记
  - 在历史列表显示过期图标
  - 提供 "归档过期入境包" 快捷操作
  - _需求: 12.7_

### 27. 数据一致性和同步

- [ ] 27.1 实现数据变更监听
  - 在 PassportDataService 添加变更监听器
  - 当用户数据变更时，检查是否有活跃的入境包
  - 如果有，显示警告："您的数据已变更，可能需要重新提交"
  - 提供 "查看变更" 和 "重新提交" 选项
  - _需求: 12.3, 12.4_

- [ ] 27.2 实现数据对比工具
  - 创建 `app/utils/DataDiffCalculator.js`
  - 实现 `calculateDiff(snapshotData, currentData)` 计算差异
  - 返回变更字段列表和变更类型（新增、修改、删除）
  - 生成用户友好的变更摘要
  - _需求: 12.3, 12.4_

- [ ] 27.3 显示数据变更提示
  - 创建 `app/components/DataChangeAlert.js`
  - 在主屏或 EntryPackDetailScreen 显示变更提示
  - 列出具体变更字段
  - 提供 "忽略" 和 "重新提交" 选项
  - 记录用户选择（避免重复提示）
  - _需求: 12.3, 12.4_

### 28. 存储优化和清理

- [ ] 28.1 实现存储使用统计
  - 在 StorageQuotaManager 中添加统计功能
  - 计算入境包数据大小
  - 计算快照照片总大小
  - 显示在设置页面："存储使用: XX MB / 可用: YY MB"
  - _需求: 18.1-18.5, 23.1-23.5_

- [ ] 28.2 实现自动清理建议
  - 检测过期或已归档的入境包
  - 建议删除超过保留期的快照
  - 显示可释放的存储空间
  - 提供 "一键清理" 功能
  - _需求: 18.1-18.5, 23.1-23.5_

- [ ] 28.3 实现手动清理工具
  - 在设置页面添加 "清理存储" 选项
  - 显示清理选项：删除过期入境包、删除旧快照、清理缓存
  - 显示每个选项可释放的空间
  - 执行清理后显示结果摘要
  - _需求: 18.1-18.5, 23.1-23.5_

---

**Phase 4 完成标准：**
- ✅ TDAC 提交后自动创建入境包和快照
- ✅ 用户可以查看入境包详情和 QR 码
- ✅ 入境包历史列表正确显示所有记录
- ✅ 重新提交流程正常工作
- ✅ 过期检测和通知正常工作
- ✅ 数据变更检测和提示正常工作
- ✅ 存储管理和清理功能正常工作

**下一阶段：** Phase 5 - 通知系统

---


## Phase 5: 通知系统

### 29. 通知基础设施

- [ ] 29.1 设置本地通知服务
  - 安装和配置通知库（如 react-native-push-notification）
  - 创建 `app/services/notification/NotificationService.js`
  - 实现 `scheduleNotification(title, body, date, data)` 调度通知
  - 实现 `cancelNotification(notificationId)` 取消通知
  - 请求通知权限
  - _需求: 16.1-16.5_

- [ ] 29.2 实现通知配置管理
  - 在用户设置中添加通知偏好
  - 配置项：启用/禁用通知、提醒时间、通知类型
  - 保存到 AsyncStorage
  - 提供默认配置
  - _需求: 16.1, 16.5_

- [ ] 29.3 创建通知模板
  - 定义通知类型：提交窗口开放、即将到达、数据变更、过期警告
  - 为每种类型创建标题和正文模板
  - 支持多语言（中文、英文、西班牙文）
  - 包含深度链接数据（导航到相关屏幕）
  - _需求: 16.1-16.5_

### 30. 提交窗口通知

- [ ] 30.1 实现窗口开放通知
  - 当到达日期前7天时发送通知："您可以提交泰国入境卡了"
  - 在用户设置到达日期时调度通知
  - 通知点击后导航到 ThailandEntryFlowScreen
  - 如果已提交，自动取消通知
  - _需求: 16.1, 16.2_

- [ ] 30.2 实现紧急提醒通知
  - 当到达日期前24小时且未提交时发送通知："紧急：请尽快提交入境卡"
  - 使用高优先级通知（声音、震动）
  - 通知点击后导航到 ThailandTravelInfoScreen
  - _需求: 16.2, 16.3_

- [ ] 30.3 实现截止日期通知
  - 当到达日期当天且未提交时发送通知："今天是提交截止日"
  - 每4小时重复提醒（最多3次）
  - 提供 "稍后提醒" 和 "立即提交" 选项
  - _需求: 16.2, 16.3_

### 31. 到达提醒通知

- [ ] 31.1 实现到达前提醒
  - 到达日期前1天发送通知："明天到达泰国，请准备好入境卡"
  - 显示入境卡号和 QR 码预览
  - 通知点击后导航到 EntryPackDetailScreen
  - _需求: 16.4_

- [ ] 31.2 实现到达当天提醒
  - 到达日期当天早上发送通知："今天到达泰国，祝旅途愉快！"
  - 提供快捷操作："查看入境卡" 和 "查看行程"
  - 显示天气信息（可选）
  - _需求: 16.4_

### 32. 数据变更通知

- [ ] 32.1 实现数据变更检测通知
  - 当检测到数据变更且有活跃入境包时发送通知
  - 通知内容："您的数据已变更，可能需要重新提交入境卡"
  - 列出变更字段摘要
  - 提供 "查看详情" 和 "重新提交" 选项
  - _需求: 12.3, 12.4, 16.5_

- [ ] 32.2 实现智能通知频率控制
  - 避免频繁通知（同一类型通知间隔至少1小时）
  - 用户可以选择 "不再提醒此变更"
  - 记录通知历史和用户响应
  - _需求: 16.5_

### 33. 过期和失效通知

- [ ] 33.1 实现过期警告通知
  - 入境包过期前1天发送通知："您的入境包即将过期"
  - 入境包过期当天发送通知："您的入境包已过期"
  - 提供 "归档" 选项
  - _需求: 12.7, 16.5_

- [ ] 33.2 实现失效通知
  - 当入境包被标记为失效时发送通知
  - 通知内容："您的入境包已失效，请重新提交"
  - 提供 "立即重新提交" 选项
  - _需求: 12.5, 12.6, 16.5_

### 34. 通知交互和深度链接

- [ ] 34.1 实现通知点击处理
  - 在 App.js 或导航根组件中监听通知点击
  - 解析通知数据中的深度链接
  - 导航到相应屏幕（EntryPackDetailScreen, ThailandTravelInfoScreen等）
  - 传递必要的参数（entryPackId, userId等）
  - _需求: 16.1-16.5_

- [ ] 34.2 实现通知操作按钮
  - 为通知添加快捷操作按钮
  - 操作示例："查看"、"提交"、"稍后提醒"、"忽略"
  - 处理操作按钮点击事件
  - 更新通知状态和用户偏好
  - _需求: 16.3, 16.5_

- [ ] 34.3 实现通知历史记录
  - 创建 `app/screens/NotificationHistoryScreen.js`
  - 显示所有已发送的通知
  - 支持重新查看通知内容
  - 支持从通知历史导航到相关屏幕
  - _需求: 16.5_

### 35. 通知测试和调试

- [ ] 35.1 实现通知测试工具
  - 在开发模式下添加通知测试页面
  - 允许手动触发各种类型的通知
  - 显示调度的通知列表
  - 提供取消所有通知的选项
  - _需求: 16.1-16.5_

- [ ] 35.2 实现通知日志
  - 记录所有通知调度和发送事件
  - 记录用户交互（点击、忽略、操作）
  - 在设置页面显示通知日志
  - 用于调试和优化通知策略
  - _需求: 16.5_

---

**Phase 5 完成标准：**
- ✅ 通知服务正确配置并可发送通知
- ✅ 提交窗口通知按时发送
- ✅ 到达提醒通知正常工作
- ✅ 数据变更通知正确触发
- ✅ 通知点击后正确导航到相关屏幕
- ✅ 用户可以配置通知偏好

**下一阶段：** Phase 6 - Immigration Officer View (展示模式)

---


## Phase 6: Immigration Officer View (展示模式)

### 36. 展示模式基础

- [ ] 36.1 创建 ImmigrationOfficerViewScreen
  - 创建 `app/screens/thailand/ImmigrationOfficerViewScreen.js`
  - 设置全屏布局（隐藏导航栏）
  - 使用深色背景和高对比度文字
  - 添加从 EntryPackDetailScreen 的导航
  - _需求: 17.1-17.7_

- [ ] 36.2 实现屏幕方向锁定
  - 进入展示模式时锁定为横屏（landscape）
  - 退出时恢复原方向设置
  - 使用 react-native-orientation-locker 或类似库
  - 处理方向变更动画
  - _需求: 17.1_

- [ ] 36.3 实现屏幕常亮
  - 进入展示模式时保持屏幕常亮
  - 使用 react-native-keep-awake 或类似库
  - 退出时恢复正常屏幕超时设置
  - _需求: 17.1_

### 37. QR 码和入境卡号显示

- [ ] 37.1 实现大尺寸 QR 码显示
  - 在屏幕中央显示 QR 码（占屏幕 50-60%）
  - 使用高分辨率 QR 码生成
  - 添加白色边框和阴影效果
  - 确保在各种光线条件下可扫描
  - _需求: 17.2, 17.3_

- [ ] 37.2 显示入境卡号
  - 在 QR 码上方显示入境卡号（超大字体）
  - 使用等宽字体便于阅读
  - 添加分隔符（如 XXXX-XXXX-XXXX）
  - 高对比度颜色（白色文字，深色背景）
  - _需求: 17.2_

- [ ] 37.3 实现亮度自动调节
  - 进入展示模式时自动提高屏幕亮度到最大
  - 退出时恢复原亮度设置
  - 使用 react-native-device-brightness 或类似库
  - _需求: 17.3_

### 38. 关键信息显示

- [ ] 38.1 显示护照信息
  - 在屏幕底部显示：姓名、护照号、国籍
  - 使用大字体和高对比度
  - 信息排列清晰，易于快速阅读
  - _需求: 17.4_

- [ ] 38.2 显示旅行信息
  - 显示：到达日期、航班号、住宿地址
  - 使用图标增强可读性
  - 信息分组显示
  - _需求: 17.4_

- [ ] 38.3 实现信息切换
  - 添加 "显示更多信息" / "显示更少信息" 切换
  - 点击屏幕边缘切换信息显示
  - 默认只显示 QR 码和入境卡号
  - 切换时使用平滑动画
  - _需求: 17.4_

### 39. 交互和手势

- [ ] 39.1 实现捏合缩放
  - 支持双指捏合缩放 QR 码
  - 缩放范围：50% - 200%
  - 缩放时保持 QR 码居中
  - 使用 react-native-gesture-handler
  - _需求: 17.5_

- [ ] 39.2 实现退出手势
  - 从屏幕顶部下滑退出展示模式
  - 显示退出提示："下滑退出"
  - 添加退出确认（可选）
  - 退出时恢复所有设置
  - _需求: 17.1, 17.7_

- [ ] 39.3 实现快捷操作
  - 长按 QR 码保存到相册
  - 双击切换信息显示
  - 三指点击显示帮助提示
  - _需求: 17.5, 17.6_

### 40. 离线支持和缓存

- [ ] 40.1 实现 QR 码缓存
  - 在创建入境包时缓存 QR 码图片
  - 使用本地文件系统存储
  - 展示模式优先使用缓存
  - 处理缓存失效情况
  - _需求: 17.6, 24.1-24.5_

- [ ] 40.2 实现离线模式提示
  - 检测网络状态
  - 在离线时显示提示："离线模式 - 使用缓存数据"
  - 确保所有功能在离线时可用
  - _需求: 24.1-24.5_

### 41. 辅助功能和优化

- [ ] 41.1 实现语言切换
  - 在展示模式中添加语言切换按钮（小图标）
  - 支持切换到英文显示（便于海关人员阅读）
  - 保存语言偏好
  - _需求: 17.7, 20.1-20.5_

- [ ] 41.2 实现帮助提示
  - 首次进入展示模式时显示引导提示
  - 说明手势操作和功能
  - 提供 "不再显示" 选项
  - 可从设置重新查看
  - _需求: 17.7_

- [ ] 41.3 实现截屏保护（可选）
  - 在展示模式中禁用截屏（安全考虑）
  - 使用 react-native-screenshot-prevent 或类似库
  - 在设置中提供开关选项
  - _需求: 19.1-19.5_

---

**Phase 6 完成标准：**
- ✅ 展示模式正确显示 QR 码和入境卡号
- ✅ 屏幕方向锁定和常亮功能正常
- ✅ 亮度自动调节正常工作
- ✅ 手势操作流畅自然
- ✅ 离线模式下所有功能可用
- ✅ 信息显示清晰易读

**下一阶段：** Phase 7 - 国际化和本地化

---

## Phase 7: 国际化和本地化

### 42. 多语言支持基础

- [ ] 42.1 扩展 i18n 配置
  - 更新 `app/i18n/locales.js` 添加新的命名空间
  - 添加命名空间：`progressiveFlow`, `entryPack`, `notifications`
  - 配置语言回退机制
  - _需求: 20.1-20.5_

- [ ] 42.2 创建翻译文件
  - 创建 `app/i18n/translations/progressiveFlow.zh.json`
  - 创建 `app/i18n/translations/progressiveFlow.en.json`
  - 创建 `app/i18n/translations/progressiveFlow.es.json`
  - 定义所有新增界面的翻译键
  - _需求: 20.1-20.5_

- [ ] 42.3 实现动态语言切换
  - 在设置页面添加语言选择器
  - 支持即时切换语言（无需重启）
  - 保存语言偏好到 AsyncStorage
  - 更新所有屏幕的文本
  - _需求: 20.1, 20.2_

### 43. 界面文本国际化

- [ ] 43.1 国际化 ThailandEntryFlowScreen
  - 替换所有硬编码文本为 i18n 键
  - 翻译：标题、状态消息、按钮文本、提示信息
  - 测试所有语言的显示效果
  - 调整布局适应不同语言文本长度
  - _需求: 20.1-20.5_

- [ ] 43.2 国际化 EntryPackDetailScreen
  - 翻译：状态横幅、信息标签、操作按钮
  - 翻译：日期格式、时间格式
  - 处理 RTL 语言（如阿拉伯语，如果支持）
  - _需求: 20.1-20.5_

- [ ] 43.3 国际化通知文本
  - 翻译所有通知模板
  - 根据用户语言偏好发送通知
  - 测试通知在不同语言下的显示
  - _需求: 20.1-20.5_

- [ ] 43.4 国际化 ImmigrationOfficerViewScreen
  - 翻译展示模式中的所有文本
  - 特别注意英文翻译（海关人员可能需要）
  - 提供语言切换快捷方式
  - _需求: 20.1-20.5_

### 44. 日期和时间本地化

- [ ] 44.1 实现日期格式化工具
  - 创建 `app/utils/DateFormatter.js`
  - 实现 `formatDate(date, locale, format)` 函数
  - 支持多种格式：短日期、长日期、相对时间
  - 使用 date-fns 或 moment.js
  - _需求: 20.3_

- [ ] 44.2 实现时间倒计时本地化
  - 更新 CountdownFormatter 支持多语言
  - 翻译时间单位：天、小时、分钟
  - 处理复数形式（英文：1 day vs 2 days）
  - _需求: 20.3_

- [ ] 44.3 更新所有日期显示
  - 替换所有日期显示为本地化格式
  - 使用用户偏好的日期格式
  - 测试不同地区的日期格式
  - _需求: 20.3_

### 45. 数字和货币本地化

- [ ] 45.1 实现数字格式化
  - 创建 `app/utils/NumberFormatter.js`
  - 实现 `formatNumber(number, locale)` 函数
  - 处理千位分隔符和小数点
  - _需求: 20.4_

- [ ] 45.2 实现货币格式化
  - 实现 `formatCurrency(amount, currency, locale)` 函数
  - 支持多种货币符号和格式
  - 在资金证明显示中使用
  - _需求: 20.4_

### 46. 内容本地化

- [ ] 46.1 本地化帮助文本和提示
  - 翻译所有帮助文本、工具提示、占位符
  - 翻译错误消息和警告
  - 翻译验证消息
  - _需求: 20.5_

- [ ] 46.2 本地化示例数据
  - 提供本地化的示例数据（如果有）
  - 翻译教程和引导文本
  - 翻译常见问题解答
  - _需求: 20.5_

### 47. 测试和质量保证

- [ ] 47.1 创建翻译测试工具
  - 检测缺失的翻译键
  - 检测未使用的翻译键
  - 生成翻译覆盖率报告
  - _需求: 20.1-20.5_

- [ ] 47.2 测试所有语言
  - 在每种支持的语言下测试所有屏幕
  - 检查文本溢出和布局问题
  - 验证日期、时间、数字格式
  - 收集用户反馈
  - _需求: 20.1-20.5_

---

**Phase 7 完成标准：**
- ✅ 所有界面文本支持多语言
- ✅ 语言切换功能正常工作
- ✅ 日期、时间、数字正确本地化
- ✅ 通知使用用户偏好语言
- ✅ 所有语言下布局正常
- ✅ 无缺失翻译键

**下一阶段：** Phase 8 - 历史、导出和隐私

---


## Phase 8: 历史、导出和隐私

### 48. 数据导出功能

- [ ] 48.1 创建数据导出服务
  - 创建 `app/services/export/DataExportService.js`
  - 实现 `exportEntryPack(entryPackId, format)` 导出入境包
  - 支持格式：JSON、PDF、图片
  - 包含所有数据和照片
  - _需求: 21.1-21.5_

- [ ] 48.2 实现 JSON 导出
  - 导出完整的入境包数据为 JSON 文件
  - 包含元数据、快照数据、提交历史
  - 使用 react-native-fs 保存到文件系统
  - 提供分享选项（邮件、云存储等）
  - _需求: 21.1, 21.2_

- [ ] 48.3 实现 PDF 导出
  - 生成包含所有信息的 PDF 文档
  - 包含 QR 码、入境卡号、个人信息、旅行信息
  - 使用 react-native-html-to-pdf 或类似库
  - 格式化为易打印的布局
  - _需求: 21.3_

- [ ] 48.4 实现图片导出
  - 导出 QR 码为高分辨率图片
  - 导出入境包摘要为图片（包含关键信息）
  - 保存到相册或分享
  - 使用 react-native-view-shot 截图
  - _需求: 21.4_

- [ ] 48.5 实现批量导出
  - 支持导出多个入境包
  - 打包为 ZIP 文件
  - 显示导出进度
  - 处理大文件导出
  - _需求: 21.5_

### 49. 数据导入功能

- [ ] 49.1 实现数据导入服务
  - 创建 `app/services/import/DataImportService.js`
  - 实现 `importEntryPack(filePath)` 导入入境包
  - 验证导入数据格式和完整性
  - 处理数据冲突（如已存在相同入境包）
  - _需求: 22.1-22.5_

- [ ] 49.2 实现 JSON 导入
  - 解析 JSON 文件
  - 验证数据结构和必填字段
  - 恢复照片到正确位置
  - 显示导入摘要
  - _需求: 22.1, 22.2_

- [ ] 49.3 实现冲突解决
  - 检测重复的入境包
  - 提供选项：覆盖、保留两者、跳过
  - 显示冲突详情对比
  - 记录导入操作日志
  - _需求: 22.3_

- [ ] 49.4 实现批量导入
  - 支持导入 ZIP 文件（包含多个入境包）
  - 显示导入进度和结果
  - 处理部分失败情况
  - 提供导入报告
  - _需求: 22.4, 22.5_

### 50. 数据备份和恢复

- [ ] 50.1 实现自动备份
  - 创建 `app/services/backup/BackupService.js`
  - 实现定期自动备份（每周或每月）
  - 备份到本地文件系统
  - 保留最近 N 个备份
  - _需求: 22.1-22.5_

- [ ] 50.2 实现云备份（可选）
  - 集成云存储服务（iCloud、Google Drive）
  - 加密备份数据
  - 实现增量备份
  - 显示备份状态和最后备份时间
  - _需求: 22.5, 19.1-19.5_

- [ ] 50.3 实现数据恢复
  - 列出可用的备份
  - 显示备份详情（日期、大小、包含的入境包数量）
  - 实现选择性恢复（恢复特定入境包）
  - 实现完整恢复（恢复所有数据）
  - _需求: 22.1-22.5_

### 51. 隐私和数据安全

- [ ] 51.1 实现数据加密
  - 使用 SecureStorageService 加密敏感数据
  - 加密快照照片
  - 加密导出文件
  - 使用设备密钥或用户密码
  - _需求: 19.1-19.5_

- [ ] 51.2 实现生物识别保护
  - 添加 Face ID / Touch ID 保护
  - 在查看入境包详情时要求验证
  - 在导出数据时要求验证
  - 在设置中提供开关选项
  - _需求: 19.3, 19.4_

- [ ] 51.3 实现数据访问日志
  - 记录所有数据访问操作
  - 记录导出、导入、查看操作
  - 显示访问历史
  - 检测异常访问模式
  - _需求: 19.5, 28.1-28.5_

- [ ] 51.4 实现数据清除功能
  - 提供 "清除所有数据" 选项
  - 需要确认和生物识别验证
  - 清除所有入境包、快照、缓存
  - 显示清除进度和结果
  - _需求: 23.1-23.5_

### 52. 审计和合规

- [ ] 52.1 实现审计日志查看器
  - 创建 `app/screens/AuditLogScreen.js`
  - 显示所有审计日志
  - 支持筛选和搜索
  - 导出审计日志
  - _需求: 28.1-28.5_

- [ ] 52.2 实现数据使用报告
  - 生成数据使用统计报告
  - 显示：入境包数量、存储使用、操作次数
  - 显示隐私合规信息
  - 导出为 PDF 或 CSV
  - _需求: 28.1-28.5_

- [ ] 52.3 实现隐私政策和条款
  - 在设置中添加隐私政策链接
  - 显示数据收集和使用说明
  - 提供数据删除请求选项
  - 记录用户同意
  - _需求: 19.1-19.5_

### 53. 性能监控和优化

- [ ] 53.1 实现性能监控
  - 监控关键操作的执行时间
  - 监控内存使用
  - 监控存储使用
  - 记录性能指标
  - _需求: 18.1-18.5_

- [ ] 53.2 实现性能优化
  - 优化大数据加载（分页、虚拟列表）
  - 优化图片加载（懒加载、缩略图）
  - 优化数据库查询
  - 实现缓存策略
  - _需求: 18.1-18.5_

- [ ] 53.3 实现错误监控和报告
  - 集成错误监控服务（如 Sentry）
  - 捕获和记录所有错误
  - 生成错误报告
  - 提供用户反馈渠道
  - _需求: 24.1-24.5_

### 54. 用户反馈和帮助

- [ ] 54.1 创建帮助中心
  - 创建 `app/screens/HelpCenterScreen.js`
  - 提供常见问题解答
  - 提供功能教程和视频
  - 提供联系支持选项
  - _需求: 20.5_

- [ ] 54.2 实现应用内反馈
  - 添加反馈按钮到设置页面
  - 收集用户反馈和建议
  - 支持附加截图
  - 发送到支持邮箱或反馈系统
  - _需求: 20.5_

- [ ] 54.3 实现功能引导
  - 为新功能添加引导提示
  - 使用 react-native-copilot 或类似库
  - 提供 "跳过" 和 "下一步" 选项
  - 记录用户完成的引导
  - _需求: 20.5_

---

**Phase 8 完成标准：**
- ✅ 数据导出和导入功能正常工作
- ✅ 备份和恢复功能可靠
- ✅ 数据加密和生物识别保护正常
- ✅ 审计日志完整记录所有操作
- ✅ 性能监控和优化有效
- ✅ 用户反馈渠道畅通

---

## 总结

**完整功能实现路线图：**

1. **Phase 1**: 基础设施层 - 数据模型、服务、工具类 (6个任务组)
2. **Phase 2**: 渐进式导航和自动保存 (6个任务组)
3. **Phase 3**: 准备状态仪表板 - ThailandEntryFlowScreen (8个任务组)
4. **Phase 4**: 入境包生命周期管理 (8个任务组)
5. **Phase 5**: 通知系统 (7个任务组)
6. **Phase 6**: Immigration Officer View (展示模式) (6个任务组)
7. **Phase 7**: 国际化和本地化 (6个任务组)
8. **Phase 8**: 历史、导出和隐私 (7个任务组)

**总计：** 8个阶段，54个主要任务组，约 160+ 个子任务

**实施建议：**
- 按阶段顺序实施，每个阶段完成后进行测试
- Phase 1-3 是核心功能，优先实施
- Phase 4-6 是增强功能，可根据需求调整优先级
- Phase 7-8 是完善功能，可在后期实施

**下一步：**
打开 tasks.md 文件，点击任务旁边的 "Start task" 按钮开始实施。建议从 Phase 1 的第一个任务开始。

---
