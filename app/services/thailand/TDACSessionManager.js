/**
 * TDAC Session Manager
 *
 * Manages TDAC session-specific encrypted IDs for form dropdowns.
 * These IDs are dynamically generated by the TDAC system and change per session.
 *
 * IMPORTANT: TDAC uses encrypted/encoded IDs for dropdown options (gender, transport mode,
 * accommodation, purpose, nationality). These IDs are NOT static - they are generated
 * per session and can expire. Hardcoding them will eventually break the submission.
 *
 * IDEAL IMPLEMENTATION (Future):
 * - Initialize TDAC session via API
 * - Fetch dropdown options dynamically
 * - Cache IDs for session duration
 * - Refresh when session expires
 *
 * CURRENT IMPLEMENTATION (Fallback):
 * - Uses last known IDs extracted from HAR files
 * - Provides warning when IDs may be stale
 * - Easy to update when IDs change
 *
 * @module TDACSessionManager
 */

/**
 * @typedef {Object} TDACSessionData
 * @property {string} sessionId - Session identifier
 * @property {Object} genderIds - Gender ID mappings
 * @property {Object} transportModeIds - Transport mode ID mappings
 * @property {Object} accommodationIds - Accommodation type ID mappings
 * @property {Object} purposeIds - Travel purpose ID mappings
 * @property {Object} nationalityIds - Nationality ID mappings
 * @property {Date} fetchedAt - When IDs were fetched
 * @property {Date} expiresAt - When session expires
 * @property {boolean} isDynamic - Whether IDs were fetched dynamically or using fallback
 */

class TDACSessionManager {
  constructor() {
    this.sessionData = null;
    this.sessionId = null;
    this.isInitialized = false;
  }

  /**
   * Initialize TDAC session and fetch dropdown IDs
   *
   * FUTURE IMPLEMENTATION:
   * 1. Open TDAC page to trigger session creation
   * 2. Handle Cloudflare protection
   * 3. Extract dropdown options from page/API
   * 4. Parse encrypted IDs
   * 5. Cache for session duration
   *
   * CURRENT IMPLEMENTATION:
   * - Uses fallback IDs extracted from HAR files (2024-Q1)
   * - Logs warning about potential staleness
   *
   * @param {Object} [options] - Initialization options
   * @param {boolean} [options.forceFresh=false] - Force fresh session (ignore cache)
   * @param {number} [options.timeout=30000] - Timeout for session initialization
   * @returns {Promise<TDACSessionData>} Session data with encrypted IDs
   */
  async initialize(options = {}) {
    const { forceFresh = false, timeout = 30000 } = options;

    // If already initialized and not forcing fresh, return cached data
    if (this.isInitialized && !forceFresh && this.sessionData) {
      // Check if session is still valid
      if (this.sessionData.expiresAt && new Date() < this.sessionData.expiresAt) {
        console.log('✅ Using cached TDAC session data');
        return this.sessionData;
      }
    }

    console.log('🔄 Initializing TDAC session...');
    console.warn('⚠️  Using fallback TDAC IDs. These are session-specific and may expire.');
    console.warn('⚠️  For production, implement dynamic ID fetching from TDAC API.');

    // Use fallback IDs (extracted from HAR files - 2024-Q1)
    this.sessionData = this._getFallbackSessionData();
    this.sessionId = this.sessionData.sessionId;
    this.isInitialized = true;

    console.log('✅ TDAC session initialized (fallback mode)');
    return this.sessionData;
  }

  /**
   * Get fallback session data with last known IDs
   *
   * These IDs were extracted from HAR files capturing TDAC API calls.
   * They are session-specific and WILL CHANGE when TDAC rotates sessions.
   *
   * To update these IDs:
   * 1. Open TDAC website in browser
   * 2. Open DevTools > Network tab
   * 3. Fill form and capture network requests
   * 4. Find API calls with dropdown data
   * 5. Extract new encrypted IDs
   * 6. Update this method
   *
   * @returns {TDACSessionData} Fallback session data
   * @private
   */
  _getFallbackSessionData() {
    const now = new Date();
    const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24 hours

    return {
      sessionId: 'fallback-session-' + now.getTime(),
      fetchedAt: now,
      expiresAt: expiresAt,
      isDynamic: false, // Using fallback, not dynamically fetched

      // Gender IDs (extracted 2024-Q1)
      genderIds: {
        MALE: 'g5iW15ADyFWOAxDewREkVA==',
        FEMALE: 'JGb85pWhehCWn5EM6PeL5A==',
        UNDEFINED: 'W6iZt0z/ayaCvyGt6LXKIA==',
      },

      // Transport Mode IDs (extracted 2024-Q1)
      transportModeIds: {
        // Specific modes
        COMMERCIAL_FLIGHT: '6XcrGmsUxFe9ua1gehBv/Q==',
        PRIVATE_CARGO: 'yYdaVPLIpwqddAuVOLDorQ==',
        OTHERS_AIR: 'mhapxYyzDmGnIyuZ0XgD8Q==',

        // General modes
        AIR_GENERAL: 'ZUSsbcDrA+GoD4mQxvf7Ag==',
        LAND_GENERAL: 'roui+vydIOBtjzLaEq6hCg==',
        SEA_GENERAL: 'kFiGEpiBus5ZgYvP6i3CNQ==',

        // Aliases
        AIR: '6XcrGmsUxFe9ua1gehBv/Q==', // Same as COMMERCIAL_FLIGHT
        LAND: 'roui+vydIOBtjzLaEq6hCg==',
        SEA: 'kFiGEpiBus5ZgYvP6i3CNQ==',
      },

      // Accommodation Type IDs (extracted 2024-Q1)
      accommodationIds: {
        HOTEL: 'kSqK152aNAx9HQigxwgnUg==',
        YOUTH_HOSTEL: 'Bsldsb4eRsgtHy+rwxGvyQ==',
        GUEST_HOUSE: 'xyft2pbI953g9FKKER4OZw==',
        FRIEND_HOUSE: 'ze+djQZsddZtZdi37G7mZg==',
        APARTMENT: 'PUB3ud2M4eOVGBmCEe4q2Q==',
        OTHERS: 'lIaJ6Z7teVjIeRF2RT97Hw==',
      },

      // Travel Purpose IDs (extracted 2024-Q1)
      purposeIds: {
        HOLIDAY: 'ZUSsbcDrA+GoD4mQxvf7Ag==',
        MEETING: 'roui+vydIOBtjzLaEq6hCg==',
        SPORTS: 'kFiGEpiBus5ZgYvP6i3CNQ==',
        BUSINESS: '//wEUc0hKyGLuN5vojDBgA==',
        INCENTIVE: 'g3Kfs7hn033IoeTa5VYrKQ==',
        MEDICAL_WELLNESS: 'Khu8eZW5Xt/2dVTwRTc7oA==',
        EDUCATION: '/LDehQQnXbGFGUe2mSC2lw==',
        CONVENTION: 'a7NwNw5YbtyIQQClpkDxiQ==',
        EMPLOYMENT: 'MIIPKOQBf05A/1ueNg8gSA==',
        EXHIBITION: 'DeSHtTxpXJk+XIG5nUlW6w==',
        OTHERS: 'J4Ru2J4RqpnDSHeA0k32PQ==',
      },

      // Nationality IDs (extracted 2024-Q1 - limited sample)
      nationalityIds: {
        CHN: 'n8NVa/feQ+F5Ok859Oywuw==', // China
        HKG: 'g6ud3ID/+b3U95emMTZsBw==', // Hong Kong
        MAC: '6H4SM3pACzdpLaJx/SR7sg==', // Macau
        // TODO: Extract more nationality IDs from HAR files as needed
      },
    };
  }

  /**
   * Get gender ID
   * @param {string} gender - Gender (MALE, FEMALE, UNDEFINED)
   * @returns {string} Encrypted gender ID
   */
  getGenderId(gender) {
    if (!this.isInitialized || !this.sessionData) {
      throw new Error('TDACSessionManager not initialized. Call initialize() first.');
    }

    const normalizedGender = gender?.toUpperCase().trim();
    const id = this.sessionData.genderIds[normalizedGender];

    if (!id) {
      console.warn(`⚠️  Unknown gender: ${gender}. Available: ${Object.keys(this.sessionData.genderIds).join(', ')}`);
      return '';
    }

    return id;
  }

  /**
   * Get transport mode ID
   * @param {string} mode - Transport mode (COMMERCIAL_FLIGHT, AIR, LAND, SEA, etc.)
   * @returns {string} Encrypted transport mode ID
   */
  getTransportModeId(mode) {
    if (!this.isInitialized || !this.sessionData) {
      throw new Error('TDACSessionManager not initialized. Call initialize() first.');
    }

    const normalizedMode = mode?.toUpperCase().trim();
    const id = this.sessionData.transportModeIds[normalizedMode];

    if (!id) {
      console.warn(`⚠️  Unknown transport mode: ${mode}. Defaulting to COMMERCIAL_FLIGHT`);
      return this.sessionData.transportModeIds.COMMERCIAL_FLIGHT;
    }

    return id;
  }

  /**
   * Get accommodation type ID
   * @param {string} type - Accommodation type (HOTEL, YOUTH_HOSTEL, etc.)
   * @returns {string} Encrypted accommodation ID
   */
  getAccommodationId(type) {
    if (!this.isInitialized || !this.sessionData) {
      throw new Error('TDACSessionManager not initialized. Call initialize() first.');
    }

    const normalizedType = type?.toUpperCase().trim();
    const id = this.sessionData.accommodationIds[normalizedType];

    if (!id) {
      console.warn(`⚠️  Unknown accommodation type: ${type}. Defaulting to HOTEL`);
      return this.sessionData.accommodationIds.HOTEL;
    }

    return id;
  }

  /**
   * Get travel purpose ID
   * @param {string} purpose - Travel purpose (HOLIDAY, BUSINESS, etc.)
   * @returns {string} Encrypted purpose ID
   */
  getPurposeId(purpose) {
    if (!this.isInitialized || !this.sessionData) {
      throw new Error('TDACSessionManager not initialized. Call initialize() first.');
    }

    const normalizedPurpose = purpose?.toUpperCase().trim();
    const id = this.sessionData.purposeIds[normalizedPurpose];

    if (!id) {
      console.warn(`⚠️  Unknown purpose: ${purpose}. Available: ${Object.keys(this.sessionData.purposeIds).join(', ')}`);
      return '';
    }

    return id;
  }

  /**
   * Get nationality ID
   * @param {string} nationality - Nationality code (CHN, HKG, MAC, etc.)
   * @returns {string} Encrypted nationality ID or empty string if not found
   */
  getNationalityId(nationality) {
    if (!this.isInitialized || !this.sessionData) {
      throw new Error('TDACSessionManager not initialized. Call initialize() first.');
    }

    const normalizedNationality = nationality?.toUpperCase().trim();
    const id = this.sessionData.nationalityIds[normalizedNationality];

    if (!id) {
      console.warn(`⚠️  Unknown nationality: ${nationality}. May need to extract ID from TDAC HAR file.`);
      return '';
    }

    return id;
  }

  /**
   * Check if session is still valid
   * @returns {boolean} True if session is valid
   */
  isSessionValid() {
    if (!this.isInitialized || !this.sessionData) {
      return false;
    }

    if (this.sessionData.expiresAt && new Date() >= this.sessionData.expiresAt) {
      return false;
    }

    return true;
  }

  /**
   * Clear session data and force re-initialization
   */
  clearSession() {
    this.sessionData = null;
    this.sessionId = null;
    this.isInitialized = false;
    console.log('🗑️  TDAC session cleared');
  }

  /**
   * Get all available dropdown options
   * Useful for debugging and UI population
   * @returns {Object} All dropdown options
   */
  getAllOptions() {
    if (!this.isInitialized || !this.sessionData) {
      throw new Error('TDACSessionManager not initialized. Call initialize() first.');
    }

    return {
      genders: Object.keys(this.sessionData.genderIds),
      transportModes: Object.keys(this.sessionData.transportModeIds),
      accommodations: Object.keys(this.sessionData.accommodationIds),
      purposes: Object.keys(this.sessionData.purposeIds),
      nationalities: Object.keys(this.sessionData.nationalityIds),
    };
  }
}

// Create singleton instance
const tdacSessionManager = new TDACSessionManager();

export default tdacSessionManager;
export { TDACSessionManager };
