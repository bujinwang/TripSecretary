// Âá∫Â¢ÉÈÄö - Interactive Immigration Guide (‰∫íÂä®ÂÖ•Â¢ÉÊåáÂçó)
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Alert,
  Vibration,
} from 'react-native';
import { colors, typography, spacing } from '../theme';

const InteractiveImmigrationGuide = ({ navigation, route }) => {
  const { passport, destination, travelInfo, currentStep: initialStep = 0 } = route.params || {};
  const [currentStep, setCurrentStep] = useState(initialStep);

  const isJapan = destination?.id === 'jp' || destination?.name === 'Êó•Êú¨';

  const steps = isJapan ? [
    {
      id: 0,
      title: 'üìã Á¨¨‰∏ÄÊ≠•ÔºöÈ¢ÜÂèñË°®Ê†º',
      description: 'Âú®ÂÖ•Â¢ÉÂ§ßÂéÖÊâæÂà∞ÂÖ•Â¢ÉÂç°ÂíåÊµ∑ÂÖ≥Áî≥Êä•Âçï',
      instruction: 'ÊâæÂà∞Ê†áÊúâ"ÂÖ•Â¢ÉÂç°"Âíå"Êµ∑ÂÖ≥Áî≥Êä•"ÁöÑÊüúÂè∞ÊàñËá™Âä®ÂèëÊîæÊú∫',
      action: 'ÊàëÂ∑≤ÊãøÂà∞Ë°®Ê†º',
      voiceText: 'ËØ∑Ëµ∞Âà∞ÂÖ•Â¢ÉÂ§ßÂéÖÁöÑË°®Ê†ºÂèëÊîæÂå∫ÔºåÈ¢ÜÂèñËìùËâ≤ÂÖ•Â¢ÉÂç°ÂíåÈªÑËâ≤Êµ∑ÂÖ≥Áî≥Êä•Âçï',
    },
    {
      id: 1,
      title: '‚úçÔ∏è Á¨¨‰∫åÊ≠•ÔºöÂ°´ÂÜôÂÖ•Â¢ÉÂç°',
      description: 'Áî®ÈªëËâ≤ÊàñËìùËâ≤Á¨îÂ°´ÂÜôËìùËâ≤ÂÖ•Â¢ÉÂç°',
      instruction: 'ÂØπÁÖßÊâãÊú∫‰∏äÁöÑ‰ø°ÊÅØÔºå‰ªîÁªÜÊäÑÂÜôÂà∞Ë°®Ê†º‰∏ä',
      action: 'ÂºÄÂßãÂ°´ÂÜôÂÖ•Â¢ÉÂç°',
      voiceText: 'Áé∞Âú®ËØ∑Áî®Á¨îÂ°´ÂÜôËìùËâ≤ÂÖ•Â¢ÉÂç°ÔºåÂßìÂêç„ÄÅÊä§ÁÖßÂè∑Á†Å„ÄÅËà™Áè≠Âè∑Á≠â‰ø°ÊÅØ',
    },
    {
      id: 2,
      title: 'üìù Á¨¨‰∏âÊ≠•ÔºöÂ°´ÂÜôÊµ∑ÂÖ≥Áî≥Êä•Âçï',
      description: 'Â°´ÂÜôÈªÑËâ≤Êµ∑ÂÖ≥Áî≥Êä•Âçï',
      instruction: 'Â¶ÇÂÆûÁî≥Êä•Êê∫Â∏¶Áâ©ÂìÅÔºåÂõûÁ≠îÊòØÂê¶ÊúâËøùÁ¶ÅÂìÅÁ≠âÈóÆÈ¢ò',
      action: 'ÂºÄÂßãÂ°´ÂÜôÁî≥Êä•Âçï',
      voiceText: 'Êé•‰∏ãÊù•Â°´ÂÜôÈªÑËâ≤Êµ∑ÂÖ≥Áî≥Êä•ÂçïÔºåËØöÂÆûÂõûÁ≠îÊâÄÊúâÈóÆÈ¢ò',
    },
    {
      id: 3,
      title: 'üè¢ Á¨¨ÂõõÊ≠•ÔºöÂâçÂæÄÂÖ•Â¢ÉÂÆ°Êü•',
      description: 'ÊãøÁùÄÂ°´Â•ΩÁöÑË°®Ê†ºÂâçÂæÄÂÖ•Â¢ÉÂÆ°Êü•ÊüúÂè∞',
      instruction: 'ÊéíÈòüÁ≠âÂæÖÂè´Âè∑Ôºå‰∫§ÁªôÂ∑•‰Ωú‰∫∫ÂëòÊ£ÄÊü•',
      action: 'ÂâçÂæÄÂÖ•Â¢ÉÊüúÂè∞',
      voiceText: 'ËØ∑ÂâçÂæÄÂÖ•Â¢ÉÂÆ°Êü•ÊüúÂè∞ÔºåÂáÜÂ§áÂ•ΩÊä§ÁÖßÂíåÂ°´Â•ΩÁöÑË°®Ê†º',
    },
    {
      id: 4,
      title: 'üë§ Á¨¨‰∫îÊ≠•ÔºöÁîüÁâ©ËØÜÂà´Ê£ÄÊü•',
      description: 'Êé•ÂèóÊåáÁ∫πÂíåÈù¢ÈÉ®ËØÜÂà´',
      instruction: 'ÊåâÁÖßÂ∑•‰Ωú‰∫∫ÂëòÊåáÁ§∫ÂÆåÊàêÁîüÁâ©ËØÜÂà´',
      action: 'ÂºÄÂßãÁîüÁâ©ËØÜÂà´',
      voiceText: 'Â∑•‰Ωú‰∫∫Âëò‰ºöÈááÈõÜÊÇ®ÁöÑÊåáÁ∫πÂíåÈù¢ÈÉ®‰ø°ÊÅØÔºåËØ∑ÈÖçÂêàÂÆåÊàê',
    },
    {
      id: 5,
      title: 'üõÉ Á¨¨ÂÖ≠Ê≠•ÔºöÊµ∑ÂÖ≥Ê£ÄÊü•',
      description: 'ÂâçÂæÄÊµ∑ÂÖ≥Ê£ÄÊü•Âå∫',
      instruction: 'ÂèØËÉΩÈúÄË¶ÅÂºÄÁÆ±Ê£ÄÊü•Ë°åÊùéÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ',
      action: 'ÂâçÂæÄÊµ∑ÂÖ≥Ê£ÄÊü•',
      voiceText: 'Áé∞Âú®ÂâçÂæÄÊµ∑ÂÖ≥Ê£ÄÊü•Âå∫ÔºåÂáÜÂ§áÊé•ÂèóË°åÊùéÊ£ÄÊü•',
    },
    {
      id: 6,
      title: 'üõÉ Á¨¨‰∏ÉÊ≠•ÔºöÂêëÊµ∑ÂÖ≥Âá∫Á§∫ÈÄöÂÖ≥ÂåÖ',
      description: 'ÊääÊâãÊú∫ÈáåÁöÑÈÄöÂÖ≥ÂåÖÊàñÊâìÂç∞‰ª∂ÈÄíÁªôÂ∑•‰Ωú‰∫∫Âëò',
      instruction: 'ÁÇπÂáª‰∏ãÊñπÊåâÈíÆÊâìÂºÄ‚ÄúÂêëÊµ∑ÂÖ≥Âá∫Á§∫‚ÄùÈ°µÈù¢ÔºåÂáÜÂ§áÂ•ΩÁªôËæπÊ£ÄÊü•Áúã',
      action: 'ÊâìÂºÄÈÄöÂÖ≥ÂåÖ',
      voiceText: 'ËØ∑ÊâìÂºÄÊâãÊú∫‰∏≠ÁöÑÈÄöÂÖ≥ÂåÖÔºåÂπ∂ÈÄíÁªôÊµ∑ÂÖ≥Â∑•‰Ωú‰∫∫ÂëòÊ†∏ÂØπ‰ø°ÊÅØ„ÄÇ',
      isFinal: true,
    },
  ] : [
    {
      id: 0,
      title: 'üìã Á¨¨‰∏ÄÊ≠•ÔºöÈ¢ÜÂèñÂÖ•Â¢ÉÊùêÊñô',
      description: 'Âú®ÂÖ•Â¢ÉÂ§ßÂéÖÈ¢ÜÂèñÁ∫∏Ë¥®Ë°®Ê†ºÊàñÁ°ÆËÆ§ÁîµÂ≠êÁî≥Êä•',
      instruction: 'Á°ÆËÆ§Êú∫Âú∫ÊåáÂºïÔºåÈ¢ÜÂèñÊàñÂáÜÂ§áÂ•ΩÈúÄË¶ÅÁöÑË°®Ê†º',
      action: 'ÊàëÂ∑≤ÂáÜÂ§áÂ•Ω',
      voiceText: 'ËØ∑ÂÖàÂú®ÂÖ•Â¢ÉÂ§ßÂéÖÈ¢ÜÂèñÊàñÁ°ÆËÆ§ÈúÄË¶ÅÂ°´ÂÜôÁöÑÂÖ•Â¢ÉË°®Ê†º„ÄÇ',
    },
    {
      id: 1,
      title: '‚úçÔ∏è Á¨¨‰∫åÊ≠•ÔºöÊ†∏ÂØπÂπ∂Â°´ÂÜôËµÑÊñô',
      description: 'ÂØπÁÖßÈÄöÂÖ≥ÂåÖÂ°´ÂÜôÊàñÁ°ÆËÆ§‰∏™‰∫∫‰ø°ÊÅØ',
      instruction: 'ÂèØÁÇπÂáª‚ÄúÊäÑÂÜôÊ®°Âºè‚ÄùÂØπÁÖßÂ°´ÂÜôÔºåÁ°Æ‰øù‰ø°ÊÅØÂáÜÁ°Æ',
      action: 'Â°´ÂÜôÂÆåÊàê',
      voiceText: 'ËØ∑ÊåâÁÖßÊâãÊú∫ÈáåÁöÑÈÄöÂÖ≥ÂåÖÈÄêÈ°πÂ°´ÂÜôÊàñÁ°ÆËÆ§‰ø°ÊÅØ„ÄÇ',
    },
    {
      id: 2,
      title: 'üõÉ ÊúÄÂêé‰∏ÄÊ≠•ÔºöÂêëÊµ∑ÂÖ≥Âá∫Á§∫ÈÄöÂÖ≥ÂåÖ',
      description: 'Â∞ÜÊâãÊú∫ÈáåÁöÑÈÄöÂÖ≥ÂåÖÂ±ïÁ§∫ÁªôËæπÊ£ÄÊàñÊµ∑ÂÖ≥',
      instruction: 'ÊâìÂºÄ‚ÄúÂêëÊµ∑ÂÖ≥Âá∫Á§∫‚ÄùÈ°µÈù¢ÔºåÈÄíÁªôÂ∑•‰Ωú‰∫∫ÂëòÊ†∏ÂØπ',
      action: 'ÊâìÂºÄÈÄöÂÖ≥ÂåÖ',
      voiceText: 'ËØ∑ÂêëÊµ∑ÂÖ≥Â∑•‰Ωú‰∫∫ÂëòÂ±ïÁ§∫ÊâãÊú∫‰∏≠ÁöÑÈÄöÂÖ≥ÂåÖÔºå‰æø‰∫éÂø´ÈÄüÈÄöÂÖ≥„ÄÇ',
      isFinal: true,
    },
  ];

  const handleNextStep = () => {
    const stepData = steps[currentStep];

    if (stepData?.isFinal) {
      Vibration.vibrate(120);
      navigation.navigate('PresentToCustoms', {
        passport,
        destination,
        travelInfo,
      });
      return;
    }

    if (currentStep < steps.length - 1) {
      Vibration.vibrate(100); // Short vibration for feedback
      setCurrentStep(currentStep + 1);
    } else {
      // Immigration completed
      Alert.alert(
        'üéâ ÂÖ•Â¢ÉÂÆåÊàêÔºÅ',
        'ÊÅ≠ÂñúÊÇ®ÊàêÂäüÂÆåÊàêÂÖ•Â¢ÉÊâãÁª≠ÔºÅ\n\nËØ∑Â¶•ÂñÑ‰øùÁÆ°ÂÖ•Â¢ÉÂç°ÂâØËÅîÔºåÁ•ùÊóÖÈÄîÊÑâÂø´ÔºÅ',
        [
          {
            text: 'Â•ΩÁöÑ',
            onPress: () => navigation.navigate('Home'), // Or appropriate next screen
          },
        ]
      );
    }
  };

  const handlePreviousStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleEmergency = () => {
    Alert.alert(
      'ÈúÄË¶ÅÂ∏ÆÂä©ÂêóÔºü',
      'ËØ∑ÈÄâÊã©ÊÇ®ÈúÄË¶ÅÁöÑÂ∏ÆÂä©Á±ªÂûãÔºö',
      [
        { text: 'ÊâæÂ∑•‰Ωú‰∫∫Âëò', onPress: () => Alert.alert('ÊèêÁ§∫', 'ËØ∑ÂØªÊâæÁ©øÂà∂ÊúçÁöÑÂ∑•‰Ωú‰∫∫Âëò') },
        { text: 'ËØ≠Ë®ÄÂ∏ÆÂä©', onPress: () => Alert.alert('ÊèêÁ§∫', 'Â∑•‰Ωú‰∫∫Âëò‰ºöËØ¥Ëã±ËØ≠ÂíåÊó•ËØ≠') },
        { text: 'ÂåªÁñóÂ∏ÆÂä©', onPress: () => Alert.alert('Á¥ßÊÄ•', 'ËØ∑Êã®ÊâìÊú∫Âú∫ÂåªÁñóÊÄ•ÊïëÁîµËØù') },
        { text: 'ÂèñÊ∂à', style: 'cancel' },
      ]
    );
  };

  const currentStepData = steps[currentStep];

  return (
    <SafeAreaView style={styles.container}>
      {/* Header with Back Button */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
        >
          <Text style={styles.backButtonText}>‚Üê ËøîÂõû</Text>
        </TouchableOpacity>
      </View>

      {/* Progress Bar */}
      <View style={styles.progressContainer}>
        <View style={styles.progressBar}>
          <View
            style={[
              styles.progressFill,
              { width: `${((currentStep + 1) / steps.length) * 100}%` },
            ]}
          />
        </View>
        <Text style={styles.progressText}>
          {currentStep + 1} / {steps.length}
        </Text>
      </View>

      {/* Emergency Button */}
      <TouchableOpacity style={styles.emergencyButton} onPress={handleEmergency}>
        <Text style={styles.emergencyIcon}>üö®</Text>
        <Text style={styles.emergencyText}>ÈúÄË¶ÅÂ∏ÆÂä©</Text>
      </TouchableOpacity>

      <ScrollView showsVerticalScrollIndicator={false} style={styles.scrollView}>
        {/* Current Step */}
        <View style={styles.stepCard}>
          <View style={styles.stepHeader}>
            <Text style={styles.stepNumber}>{currentStep + 1}</Text>
            <View style={styles.stepContent}>
              <Text style={styles.stepTitle}>{currentStepData.title}</Text>
              <Text style={styles.stepDescription}>{currentStepData.description}</Text>
            </View>
          </View>

          <View style={styles.instructionBox}>
            <Text style={styles.instructionIcon}>üí°</Text>
            <Text style={styles.instructionText}>{currentStepData.instruction}</Text>
          </View>

        </View>
      </ScrollView>

      {/* Navigation Buttons */}
      <View style={styles.navigationContainer}>
        {currentStep > 0 && (
          <TouchableOpacity
            style={styles.navButtonSecondary}
            onPress={handlePreviousStep}
          >
            <Text style={styles.navButtonTextSecondary}>‰∏ä‰∏ÄÊ≠•</Text>
          </TouchableOpacity>
        )}

        <TouchableOpacity
          style={styles.navButtonPrimary}
          onPress={handleNextStep}
        >
          <Text style={styles.navButtonTextPrimary}>
            {currentStepData.action}
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: spacing.lg,
    paddingVertical: spacing.sm,
    backgroundColor: colors.white,
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
  },
  backButton: {
    paddingVertical: spacing.xs,
    paddingHorizontal: spacing.sm,
  },
  backButtonText: {
    fontSize: 16,
    color: colors.primary,
    fontWeight: '600',
  },
  progressContainer: {
    paddingHorizontal: spacing.lg,
    paddingTop: spacing.md,
    paddingBottom: spacing.sm,
  },
  progressBar: {
    height: 8,
    backgroundColor: colors.border,
    borderRadius: 4,
    marginBottom: spacing.xs,
  },
  progressFill: {
    height: '100%',
    backgroundColor: colors.primary,
    borderRadius: 4,
  },
  progressText: {
    ...typography.caption,
    color: colors.textSecondary,
    textAlign: 'center',
  },
  emergencyButton: {
    position: 'absolute',
    top: spacing.xl,
    right: spacing.lg,
    backgroundColor: '#FF4444',
    paddingHorizontal: spacing.lg,
    paddingVertical: spacing.md,
    borderRadius: 25,
    flexDirection: 'row',
    alignItems: 'center',
    zIndex: 1000,
    elevation: 5,
  },
  emergencyIcon: {
    fontSize: 20,
    marginRight: spacing.xs,
  },
  emergencyText: {
    ...typography.body2,
    color: colors.white,
    fontWeight: 'bold',
  },
  scrollView: {
    flex: 1,
    paddingHorizontal: spacing.lg,
  },
  stepCard: {
    backgroundColor: colors.white,
    padding: spacing.xl,
    borderRadius: 16,
    marginBottom: spacing.lg,
    borderWidth: 2,
    borderColor: colors.primary,
  },
  stepHeader: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: spacing.lg,
  },
  stepNumber: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: colors.primary,
    color: colors.white,
    textAlign: 'center',
    textAlignVertical: 'center',
    fontSize: 24,
    fontWeight: 'bold',
    marginRight: spacing.lg,
  },
  stepContent: {
    flex: 1,
  },
  stepTitle: {
    ...typography.h2,
    color: colors.text,
    marginBottom: spacing.sm,
    fontWeight: 'bold',
  },
  stepDescription: {
    ...typography.body1,
    color: colors.textSecondary,
    lineHeight: 24,
  },
  instructionBox: {
    backgroundColor: colors.primaryLight,
    padding: spacing.lg,
    borderRadius: 12,
    marginBottom: spacing.lg,
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  instructionIcon: {
    fontSize: 24,
    marginRight: spacing.md,
  },
  instructionText: {
    ...typography.body1,
    color: colors.text,
    flex: 1,
    lineHeight: 24,
  },
  navigationContainer: {
    flexDirection: 'row',
    padding: spacing.lg,
    gap: spacing.md,
  },
  navButtonSecondary: {
    flex: 1,
    backgroundColor: colors.border,
    paddingVertical: spacing.lg,
    borderRadius: 12,
    alignItems: 'center',
  },
  navButtonTextSecondary: {
    ...typography.h3,
    color: colors.textSecondary,
    fontWeight: '600',
  },
  navButtonPrimary: {
    flex: 2,
    backgroundColor: colors.primary,
    paddingVertical: spacing.lg,
    borderRadius: 12,
    alignItems: 'center',
  },
  navButtonTextPrimary: {
    ...typography.h3,
    color: colors.white,
    fontWeight: 'bold',
  },
});

export default InteractiveImmigrationGuide;
